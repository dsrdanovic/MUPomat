/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mupomat.view;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.font.TextAttribute;
import java.io.IOException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import mupomat.controller.ObradaKorisnik;
import mupomat.model.Korisnik;
import mupomat.utility.Kontrola;

/**
 *
 * @author SrKy
 */
public class Registracija extends javax.swing.JFrame {

    private Pattern pattern;
    private Matcher matcher;
    private Korisnik korisnik;
    private ObradaKorisnik obradaKorisnik;
    private ImageIcon ikona;

    /**
     * Creates new form Registracija
     */
    public Registracija() {
        initComponents();
        setTitle("MUPomat: Registracija");
        centrirajZaslon();
        dodajIkonu();
        obradaKorisnik = new ObradaKorisnik();
        txtOib.requestFocus();
        ikona = new ImageIcon(getClass().getResource("/mupomat/pictures/balloonerror.png"));
        postavkeSaznajSvojOIB();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPrezime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtKorisnickoIme = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtOib = new javax.swing.JTextField();
        txtLozinka = new javax.swing.JPasswordField();
        txtLozinkaPonovo = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        btnRegistriraj = new javax.swing.JButton();
        lblSaznajteSvojOIB = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Podaci za registraciju"));

        jLabel1.setText("Ime");

        jLabel2.setText("Prezime");

        jLabel3.setText("Korisniƒçko ime");

        jLabel4.setText("Lozinka");

        jLabel5.setText("Lozinka ponovo");

        jLabel6.setText("OIB");

        jLabel7.setText("E-mail");

        btnRegistriraj.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRegistriraj.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mupomat/pictures/prijavaikona.png"))); // NOI18N
        btnRegistriraj.setText("REGISTRIRAJTE SE");
        btnRegistriraj.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegistriraj.setMaximumSize(new java.awt.Dimension(135, 25));
        btnRegistriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrirajActionPerformed(evt);
            }
        });

        lblSaznajteSvojOIB.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblSaznajteSvojOIB.setText("Saznajte svoj OIB ");
        lblSaznajteSvojOIB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblSaznajteSvojOIB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSaznajteSvojOIBMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnRegistriraj, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                    .addComponent(lblSaznajteSvojOIB)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel7)
                                                    .addGap(56, 56, 56)))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(49, 49, 49)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(18, 18, 18)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(47, 47, 47)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(66, 66, 66)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(66, 66, 66)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtOib, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                            .addComponent(txtIme)
                            .addComponent(txtPrezime)
                            .addComponent(txtKorisnickoIme)
                            .addComponent(txtLozinka)
                            .addComponent(txtEmail)
                            .addComponent(txtLozinkaPonovo))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSaznajteSvojOIB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKorisnickoIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLozinka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLozinkaPonovo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(btnRegistriraj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrirajActionPerformed
        if (!kontrola()) {
            return;
        }

        korisnik = new Korisnik();
        korisnik.setOib(txtOib.getText());
        korisnik.setIme(txtIme.getText());
        korisnik.setPrezime(txtPrezime.getText());
        korisnik.setKorisnickoIme(txtKorisnickoIme.getText());
        korisnik.setLozinka(new String(txtLozinka.getPassword()));
        korisnik.setEmail(txtEmail.getText());
        korisnik.setUloga("korisnik");
        korisnik.setAktivan(true);
        korisnik = obradaKorisnik.dodajNovi(korisnik);

        pocistiPolja();

        JOptionPane.showMessageDialog(rootPane, "Registracija je uspje≈°no zavr≈°ena!", "Registracija", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();

    }//GEN-LAST:event_btnRegistrirajActionPerformed

    private void lblSaznajteSvojOIBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSaznajteSvojOIBMouseClicked
        String url = "http://oib.oib.hr/SaznajOibWeb/fizickaOsoba.html";
        try {
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (IOException ex) {
            Logger.getLogger(Registracija.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_lblSaznajteSvojOIBMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistriraj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblSaznajteSvojOIB;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtKorisnickoIme;
    private javax.swing.JPasswordField txtLozinka;
    private javax.swing.JPasswordField txtLozinkaPonovo;
    private javax.swing.JTextField txtOib;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables

    private void centrirajZaslon() {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
        this.setResizable(false);
    }

    private void dodajIkonu() {
        this.setIconImage(new ImageIcon(getClass()
                .getResource("/mupomat" + "/pictures" + "/m.png")).getImage());
    }

    private void pocistiPolja() {
        txtOib.setText("");
        txtIme.setText("");
        txtPrezime.setText("");
        txtKorisnickoIme.setText("");
        txtLozinka.setText("");
        txtLozinkaPonovo.setText("");
        txtEmail.setText("");
    }

    private boolean kontrola() {
        if (!kontrolaOib()
                || !kontrolaIme()
                || !kontrolaPrezime()
                || !kontrolaKorisnickoIme()
                || !kontrolaLozinka()
                || !kontrolaEmail()) {
            return false;
        }

        return true;
    }

    private boolean kontrolaOib() {
        pattern = Pattern.compile(Kontrola.OIB);
        matcher = pattern.matcher(txtOib.getText().trim());

        Kontrola.resetirajPoljeGreske(txtOib);
        if (!Kontrola.kontrolaPraznoPolje(txtOib.getText(), txtOib, "Ovo polje je obavezno! ", ikona)
                || !kontrolaOibPostojiUBazi()) {
            Kontrola.oznaciPoljeGreske(txtOib);
            return false;
        }
        if (!matcher.matches()) {
            Kontrola.kontrolaUnosa(txtOib, "<html>Netoƒçan unos.<br>Dopu≈°teno: [0-9, toƒçno 11 znakova]</html> ", ikona);
            Kontrola.oznaciPoljeGreske(txtOib);
            return false;
        }

        return true;

    }

    private boolean kontrolaIme() {
        pattern = Pattern.compile(Kontrola.IME);
        matcher = pattern.matcher(txtIme.getText().trim());

        Kontrola.resetirajPoljeGreske(txtIme);
        if (!Kontrola.kontrolaPraznoPolje(txtIme.getText(), txtIme, "Ovo polje je obavezno! ", ikona)) {
            Kontrola.oznaciPoljeGreske(txtIme);
            return false;
        }
        if (!matcher.matches()) {
            Kontrola.kontrolaUnosa(txtIme, "<html>Netoƒçan unos.<br>Dopu≈°teno: [a-≈æ,A-≈Ω,razmak]<br>(min.2 maks.50 znakova)</html> ", ikona);
            Kontrola.oznaciPoljeGreske(txtIme);
            return false;
        }

        return true;
    }

    private boolean kontrolaPrezime() {
        pattern = Pattern.compile(Kontrola.PREZIME);
        matcher = pattern.matcher(txtPrezime.getText().trim());

        Kontrola.resetirajPoljeGreske(txtPrezime);
        if (!Kontrola.kontrolaPraznoPolje(txtPrezime.getText(), txtPrezime, "Ovo polje je obavezno! ", ikona)) {
            Kontrola.oznaciPoljeGreske(txtPrezime);
            return false;
        }
        if (!matcher.matches()) {
            Kontrola.kontrolaUnosa(txtPrezime, "<html>Netoƒçan unos.<br>Dopu≈°teno: [a-≈æ,A-≈Ω,razmak]<br>(min.2 maks.50 znakova)</html> ", ikona);
            Kontrola.oznaciPoljeGreske(txtPrezime);
            return false;
        }

        return true;
    }

    private boolean kontrolaKorisnickoIme() {
        pattern = Pattern.compile(Kontrola.KORISNICKO_IME);
        matcher = pattern.matcher(txtKorisnickoIme.getText().trim());

        Kontrola.resetirajPoljeGreske(txtKorisnickoIme);
        if (!Kontrola.kontrolaPraznoPolje(txtKorisnickoIme.getText(), txtKorisnickoIme, "Ovo polje je obavezno! ", ikona)
                || !kontrolaKorisnikPostojiUBazi()) {
            Kontrola.oznaciPoljeGreske(txtKorisnickoIme);
            return false;
        }
        if (!matcher.matches()) {
            Kontrola.kontrolaUnosa(txtKorisnickoIme, "<html>Netoƒçan unos.<br>Dopu≈°teno: [a-z,0-9,_,-]<br>(min.6 max.15 znakova)</html> ", ikona);
            Kontrola.oznaciPoljeGreske(txtKorisnickoIme);
            return false;
        }

        return true;
    }

    private boolean kontrolaLozinka() {
        pattern = Pattern.compile(Kontrola.LOZINKA);
        matcher = pattern.matcher(new String(txtLozinka.getPassword()));

        Kontrola.resetirajPoljeGreske(txtLozinka);
        Kontrola.resetirajPoljeGreske(txtLozinkaPonovo);

        if (!Kontrola.kontrolaPraznoPolje(new String(txtLozinka.getPassword()), txtLozinka, "Ovo polje je obavezno! ", ikona)
                || !Kontrola.kontrolaPraznoPolje(new String(txtLozinkaPonovo.getPassword()), txtLozinkaPonovo, "Ovo polje je obavezno! ", ikona)
                || !kontrolaLozinkeIste()) {

            Kontrola.oznaciPoljeGreske(txtLozinka);
            Kontrola.oznaciPoljeGreske(txtLozinkaPonovo);

            return false;
        }

        if (!matcher.matches()) {
            Kontrola.kontrolaUnosa(txtLozinka, "<html>Netoƒçan unos.<br>Lozinka mora sadr≈æavati minimalno jedno malo slovo,<br>jedno veliko slovo i jedan broj.<br>(min.6 max.10 znakova)</html> ", ikona);
            Kontrola.oznaciPoljeGreske(txtLozinka);
            return false;
        }

        return true;
    }

    private boolean kontrolaLozinkeIste() {
        if (!new String(txtLozinka.getPassword()).equals(new String(txtLozinkaPonovo.getPassword()))) {
            Kontrola.kontrolaUnosa(txtLozinka, "<html>Netoƒçan unos.<br>Lozinke nisu jednake!</html> ", ikona);
            return false;
        }

        return true;
    }

    private boolean kontrolaEmail() {
        pattern = Pattern.compile(Kontrola.EMAIL);
        matcher = pattern.matcher(txtEmail.getText().trim());

        Kontrola.resetirajPoljeGreske(txtEmail);
        if (!Kontrola.kontrolaPraznoPolje(txtEmail.getText(), txtEmail, "Ovo polje je obavezno! ", ikona)) {
            Kontrola.oznaciPoljeGreske(txtEmail);
            return false;
        }
        if (!matcher.matches()) {
            Kontrola.kontrolaUnosa(txtEmail, "<html>Netoƒçan unos.<br>Primjer: ime.prezime@gmail.com</html> ", ikona);
            Kontrola.oznaciPoljeGreske(txtEmail);
            return false;
        }

        return true;
    }

    private boolean kontrolaKorisnikPostojiUBazi() {
        Korisnik k = obradaKorisnik.dohvatiKorisnikaPoKorisnickomImenu(txtKorisnickoIme.getText().trim());
        if (k != null) {
            Kontrola.kontrolaUnosa(txtKorisnickoIme, "Korisnik s istim korisniƒçkim imenom postoji! ", ikona);
            return false;
        }

        return true;
    }

    private boolean kontrolaOibPostojiUBazi() {
        Korisnik k = obradaKorisnik.dohvatiKorisnikaPoOibu(txtOib.getText().trim());
        if (k != null) {
            Kontrola.kontrolaUnosa(txtOib, "Korisnik s istim OIB-om postoji! ", ikona);
            return false;
        }

        return true;
    }

    private void postavkeSaznajSvojOIB() {
        Font font = lblSaznajteSvojOIB.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblSaznajteSvojOIB.setFont(font.deriveFont(attributes));
    }

}
