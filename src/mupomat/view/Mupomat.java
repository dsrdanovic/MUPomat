/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mupomat.view;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.font.TextAttribute;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import mupomat.controller.ObradaAutomat;
import mupomat.controller.ObradaGrad;
import mupomat.controller.ObradaDokument;
import mupomat.controller.ObradaPolicijskaPostaja;
import mupomat.controller.ObradaPolicijskaUprava;
import mupomat.model.Automat;
import mupomat.model.Grad;
import mupomat.model.Korisnik;
import mupomat.model.Dokument;
import mupomat.model.PolicijskaPostaja;
import mupomat.model.PolicijskaUprava;
import mupomat.utility.Kontrola;
import mupomat.utility.LongLatService;
import mupomat.utility.Sat;
import no.vianett.sms.Sms;
import no.vianett.sms.SmsEvent;
import no.vianett.sms.SmsEventListener;
import no.vianett.sms.component.SmsTransceiver;
import no.vianett.sms.event.SmsDeliveredEvent;
import no.vianett.sms.event.SmsDeliveryFailedEvent;
import no.vianett.sms.event.SmsSendingFailedEvent;
import no.vianett.sms.log.SmsScreenLogger;

/**
 *
 * @author SrKy
 */
public class Mupomat extends javax.swing.JFrame implements SmsEventListener, Runnable {

    public Sat sat;
    private SmsTransceiver transceiver = null;
    private Object link = null; // Just to keep this object alive.
    private int counter = 0;
    public Korisnik korisnik;
    public ObradaPolicijskaUprava obradaPolicijskaUprava;
    public PolicijskaUprava policijskaUprava;
    public ObradaGrad obradaGrad;
    public Grad grad;
    public ObradaPolicijskaPostaja obradaPolicijskaPostaja;
    public PolicijskaPostaja policijskaPostaja;
    public Automat automat;
    public ObradaAutomat obradaAutomat;
    public Dokument dokument;
    public ObradaDokument obradaDokumenti;
    public LongLatService longLatService;
    public String adresa;
    private LongLatService tDirectionService;
    private int bK;
    private Thread runner;
    private String datum;

    /**
     * Creates new form Mupomat
     *
     * @param korisnik
     *
     */
    public Mupomat(Korisnik korisnik) {
        initComponents();
        setTitle("MUPomat: " + korisnik.getKorisnickoIme() + " " + "(Korisnik)");
        centrirajZaslon();
        dodajIkonu();
        ucitajVrijemeIDatum();
        lblMapa.setVisible(false);
        lblAdresa.setVisible(false);
        lblTelefon.setVisible(false);
        obradaGrad = new ObradaGrad();
        obradaPolicijskaUprava = new ObradaPolicijskaUprava();
        obradaPolicijskaPostaja = new ObradaPolicijskaPostaja();
        obradaAutomat = new ObradaAutomat();
        obradaDokumenti = new ObradaDokument();
        this.korisnik = korisnik;
        napuniCBPolicijskeUprave();
        datum();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbPolicijskeUprave = new javax.swing.JComboBox();
        cmbGradovi = new javax.swing.JComboBox();
        cmbPolicijskePostaje = new javax.swing.JComboBox();
        btnGenerirajBroj = new javax.swing.JButton();
        txtBroj = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDokumenata = new javax.swing.JList();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();
        lblBrojKlijenata = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        lblVrijemePrijave = new javax.swing.JLabel();
        jToolBar3 = new javax.swing.JToolBar();
        jLabel3 = new javax.swing.JLabel();
        lblAdresa = new javax.swing.JLabel();
        lblMapa = new javax.swing.JLabel();
        txtBrojMobitela = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jToolBar4 = new javax.swing.JToolBar();
        lblVrijemeIDatum = new javax.swing.JLabel();
        lblPromjeniSkin = new javax.swing.JLabel();
        cmbObavijesti = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        lblOdjaviteSe = new javax.swing.JLabel();
        txtMupomat = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jToolBar5 = new javax.swing.JToolBar();
        jLabel4 = new javax.swing.JLabel();
        lblTelefon = new javax.swing.JLabel();
        lblPromjenaLozinke = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbPolicijskeUprave.setToolTipText("");
        cmbPolicijskeUprave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbPolicijskeUprave.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPolicijskeUpraveItemStateChanged(evt);
            }
        });

        cmbGradovi.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--- ODABERITE GRAD ---" }));
        cmbGradovi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbGradovi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGradoviItemStateChanged(evt);
            }
        });

        cmbPolicijskePostaje.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--- ODABERITE POLICIJSKU POSTAJU ---" }));
        cmbPolicijskePostaje.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbPolicijskePostaje.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPolicijskePostajeItemStateChanged(evt);
            }
        });

        btnGenerirajBroj.setText("Uzmi e-Broj");
        btnGenerirajBroj.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGenerirajBroj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerirajBrojActionPerformed(evt);
            }
        });

        txtBroj.setEditable(false);
        txtBroj.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtBroj.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBroj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrojActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listaDokumenata);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel2.setText("  Broj klijenata ispred Vas: ");
        jToolBar1.add(jLabel2);
        jToolBar1.add(lblBrojKlijenata);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        jLabel1.setText("  Vrijeme prijave: ");
        jToolBar2.add(jLabel1);
        jToolBar2.add(lblVrijemePrijave);

        jToolBar3.setFloatable(false);
        jToolBar3.setRollover(true);

        jLabel3.setText("  Adresa: ");
        jToolBar3.add(jLabel3);

        lblAdresa.setText("Adresa");
        jToolBar3.add(lblAdresa);

        lblMapa.setText(" (Mapa)");
        lblMapa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblMapa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblMapaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblMapaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblMapaMouseExited(evt);
            }
        });
        jToolBar3.add(lblMapa);

        txtBrojMobitela.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setText("Unesite broj mobitela:");

        jToolBar4.setFloatable(false);
        jToolBar4.setRollover(true);

        lblVrijemeIDatum.setText("  Vrijeme i datum");
        jToolBar4.add(lblVrijemeIDatum);

        lblPromjeniSkin.setText("Promjeni izgled aplikacije ");
        lblPromjeniSkin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblPromjeniSkin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPromjeniSkinMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblPromjeniSkinMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblPromjeniSkinMouseExited(evt);
            }
        });

        cmbObavijesti.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TreÄ‡i u redu", "Peti u redu", "Sedmi u redu", "Deseti u redu" }));
        cmbObavijesti.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel6.setText("Obavjestite me kada sam:");

        lblOdjaviteSe.setText("Odjavite se");
        lblOdjaviteSe.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblOdjaviteSe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblOdjaviteSeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblOdjaviteSeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblOdjaviteSeMouseExited(evt);
            }
        });

        txtMupomat.setEditable(false);
        txtMupomat.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel7.setText("Automat:");

        jLabel8.setText("Odaberite dokument:");

        jToolBar5.setFloatable(false);
        jToolBar5.setRollover(true);

        jLabel4.setText("  Telefon: ");
        jToolBar5.add(jLabel4);

        lblTelefon.setText("Telefon");
        jToolBar5.add(lblTelefon);

        lblPromjenaLozinke.setText("Promjeni lozinku");
        lblPromjenaLozinke.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblPromjenaLozinke.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPromjenaLozinkeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblPromjenaLozinkeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblPromjenaLozinkeMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMupomat))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbObavijesti, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPromjeniSkin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPromjenaLozinke)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblOdjaviteSe))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBrojMobitela))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnGenerirajBroj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBroj, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(cmbPolicijskePostaje, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbGradovi, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPolicijskeUprave, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jToolBar5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbPolicijskeUprave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbGradovi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbPolicijskePostaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtMupomat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtBrojMobitela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cmbObavijesti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerirajBroj, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtBroj, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPromjeniSkin)
                    .addComponent(lblOdjaviteSe)
                    .addComponent(lblPromjenaLozinke))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbPolicijskeUpraveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPolicijskeUpraveItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            return;
        }
        PolicijskaUprava pu = (PolicijskaUprava) cmbPolicijskeUprave.getSelectedItem();
        if (pu == null || pu.getSifra() == 0) {
            return;
        }

        napuniCMBGradove(pu.getSifra());
    }//GEN-LAST:event_cmbPolicijskeUpraveItemStateChanged

    private void cmbGradoviItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGradoviItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            return;
        }
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            txtMupomat.setText("");

        }
        Grad g = (Grad) cmbGradovi.getSelectedItem();
        if (g == null || g.getSifra() == 0) {
            return;
        }

        napuniCMBPolicijskePostaje(g.getSifra());
    }//GEN-LAST:event_cmbGradoviItemStateChanged

    private void cmbPolicijskePostajeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPolicijskePostajeItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            return;
        }

        PolicijskaPostaja pp = (PolicijskaPostaja) cmbPolicijskePostaje.getSelectedItem();
        lblAdresa.setText(pp.getAdresa());
        lblTelefon.setText(pp.getTelefon());
        lblAdresa.setVisible(true);
        lblTelefon.setVisible(true);
        lblMapa.setVisible(true);
        if (pp == null || pp.getSifra() == 0) {
            return;

        }

        postaviTFAutomati(pp.getSifra());
        pronadiLatLng();

    }//GEN-LAST:event_cmbPolicijskePostajeItemStateChanged

    private void btnGenerirajBrojActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerirajBrojActionPerformed
        if (listaDokumenata.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(rootPane, "Prvo izaberite Å¾eljeni dokument iz liste!", "GreÅ¡ka", JOptionPane.ERROR_MESSAGE);
            return;
        }
        generirajBroj();
        generirajBrojKlijenataIspredVas();
        vrijemePrijave();
        new Salter(this).setVisible(true);

    }//GEN-LAST:event_btnGenerirajBrojActionPerformed

    private void txtBrojActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrojActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrojActionPerformed

    private void lblPromjeniSkinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPromjeniSkinMouseClicked
        otvaranjeProgramaPromjeniSkin();
    }//GEN-LAST:event_lblPromjeniSkinMouseClicked

    private void lblPromjeniSkinMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPromjeniSkinMouseEntered
        Font font = lblPromjeniSkin.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblPromjeniSkin.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblPromjeniSkinMouseEntered

    private void lblPromjeniSkinMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPromjeniSkinMouseExited
        lblPromjeniSkin.setFont(null);
    }//GEN-LAST:event_lblPromjeniSkinMouseExited

    private void lblOdjaviteSeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOdjaviteSeMouseEntered
        Font font = lblOdjaviteSe.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblOdjaviteSe.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblOdjaviteSeMouseEntered

    private void lblOdjaviteSeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOdjaviteSeMouseExited
        lblOdjaviteSe.setFont(null);
    }//GEN-LAST:event_lblOdjaviteSeMouseExited

    private void lblOdjaviteSeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOdjaviteSeMouseClicked
        Object[] options = {"Odjavite se",
            "Ostani",};
        int rez = JOptionPane.showOptionDialog(rootPane,//parent container of JOptionPane
                "Å½elite se odjaviti?",
                "MUPomat: Odjava",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,//do not use a custom Icon
                options,//the titles of buttons
                null);//default button title
        if (rez == JOptionPane.YES_OPTION) {
            this.dispose();
            new PrijavaKorisnika().setVisible(true);
        }
    }//GEN-LAST:event_lblOdjaviteSeMouseClicked

    private void lblMapaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMapaMouseClicked
        otvaranjeProgramaMape();
    }//GEN-LAST:event_lblMapaMouseClicked

    private void lblMapaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMapaMouseEntered
        Font font = lblMapa.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblMapa.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblMapaMouseEntered

    private void lblMapaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblMapaMouseExited
        lblMapa.setFont(null);
    }//GEN-LAST:event_lblMapaMouseExited

    private void lblPromjenaLozinkeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPromjenaLozinkeMouseEntered
        Font font = lblPromjenaLozinke.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblPromjenaLozinke.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblPromjenaLozinkeMouseEntered

    private void lblPromjenaLozinkeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPromjenaLozinkeMouseExited
        lblPromjenaLozinke.setFont(null);
    }//GEN-LAST:event_lblPromjenaLozinkeMouseExited

    private void lblPromjenaLozinkeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPromjenaLozinkeMouseClicked
        otvaranjeProgramaPromjenaLozinke();
    }//GEN-LAST:event_lblPromjenaLozinkeMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerirajBroj;
    private javax.swing.JComboBox cmbGradovi;
    private javax.swing.JComboBox cmbObavijesti;
    private javax.swing.JComboBox cmbPolicijskePostaje;
    private javax.swing.JComboBox cmbPolicijskeUprave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar5;
    private javax.swing.JLabel lblAdresa;
    private javax.swing.JLabel lblBrojKlijenata;
    private javax.swing.JLabel lblMapa;
    private javax.swing.JLabel lblOdjaviteSe;
    private javax.swing.JLabel lblPromjenaLozinke;
    private javax.swing.JLabel lblPromjeniSkin;
    private javax.swing.JLabel lblTelefon;
    private javax.swing.JLabel lblVrijemeIDatum;
    private javax.swing.JLabel lblVrijemePrijave;
    private javax.swing.JList listaDokumenata;
    private javax.swing.JTextField txtBroj;
    private javax.swing.JTextField txtBrojMobitela;
    private javax.swing.JTextField txtMupomat;
    // End of variables declaration//GEN-END:variables

    private void centrirajZaslon() {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
        this.setResizable(false);
    }

    private void napuniCBPolicijskeUprave() {
        ObradaPolicijskaUprava opu = new ObradaPolicijskaUprava();
        List<PolicijskaUprava> l = opu.dohvatiIzBaze("");
        DefaultComboBoxModel<PolicijskaUprava> m = new DefaultComboBoxModel<>();
        PolicijskaUprava pu = new PolicijskaUprava();
        pu.setSifra(0);
        pu.setNaziv("--- ODABERITE POLICIJSKU UPRAVU ---");
        m.addElement(pu);
        for (PolicijskaUprava policijskaUprava : l) {

            m.addElement(policijskaUprava);
        }

        cmbPolicijskeUprave.setModel(m);

    }

    private void napuniCMBGradove(int sifraPolicijskeUprave) {
        ObradaGrad og = new ObradaGrad();
        List<Grad> l = og.dohvatiGradovePolicijskePostaje(sifraPolicijskeUprave);
        DefaultComboBoxModel<Grad> m = new DefaultComboBoxModel<>();
        Grad g = new Grad();
        g.setSifra(0);
        g.setNaziv("--- ODABERITE GRAD ---");
        m.addElement(g);
        for (Grad grad : l) {
            m.addElement(grad);
        }
        cmbGradovi.setModel(m);
        cmbGradovi.repaint();
    }

    private void napuniCMBPolicijskePostaje(int sifraGrada) {
        ObradaPolicijskaPostaja opp = new ObradaPolicijskaPostaja();
        List<PolicijskaPostaja> l = opp.dohvatiPolicijskePostajeGradova(sifraGrada);
        DefaultComboBoxModel<PolicijskaPostaja> m = new DefaultComboBoxModel<>();
        PolicijskaPostaja pp = new PolicijskaPostaja();
        pp.setSifra(0);
        pp.setNaziv("--- ODABERITE POLICIJSKU POSTAJU ---");
        m.addElement(pp);
        for (PolicijskaPostaja policijskaPostaja : l) {
            m.addElement(policijskaPostaja);

        }
        cmbPolicijskePostaje.setModel(m);
        cmbPolicijskePostaje.repaint();

    }

    private void postaviTFAutomati(int sifraPolicijskePostaje) {

        ObradaAutomat oa = new ObradaAutomat();
        List<Automat> l = oa.dohvatiAutomatePolicijskihPostaja(sifraPolicijskePostaje);
        for (Automat automat : l) {

            txtMupomat.setText(String.valueOf(automat));
            napuniListuDokumenata(automat.getSifra());
        }

    }

    private void generirajBroj() {

        Random random = new Random();
        for (int i = 1; i < 200; i++) {
            int izvuceniBroj = random.nextInt(200);
            txtBroj.setText(String.valueOf(izvuceniBroj));

        }

    }

    private void napuniListuDokumenata(int sifraAutomata) {
        ObradaDokument oo = new ObradaDokument();
        List<Dokument> lista = oo.dohvatiDokumenteAutomata(sifraAutomata);
        DefaultListModel<Dokument> m = new DefaultListModel<>();

        for (Dokument dokument : lista) {
            m.addElement(dokument);
        }
        listaDokumenata.setModel(m);
    }

    private void generirajBrojKlijenataIspredVas() {
        Random rand = new Random();
        int min = 1;
        int max = Integer.parseInt(txtBroj.getText());
        int izvuceniBroj = rand.nextInt((max - min) + 1) + min;
        int brojKlijenata = (max - izvuceniBroj);
        lblBrojKlijenata.setText(String.valueOf(brojKlijenata));
    }

    public void smanjiBroj() {
        int brojKlijenata = Integer.parseInt(lblBrojKlijenata.getText());
        brojKlijenata--;

        lblBrojKlijenata.setText(String.valueOf(brojKlijenata));

        for (int i = 1; i < 5; i++) {
            bK = Integer.parseInt(lblBrojKlijenata.getText());
            switch (i) {

                case 1:

                    if (cmbObavijesti.getSelectedIndex() == 0 && bK == 2) {
                        posaljiSMS();
                        JOptionPane.showMessageDialog(rootPane, txtMupomat.getText() + ":" + " " + "3. ste u redu za dokument " + listaDokumenata.getSelectedValue().toString().substring(3)+".", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
                        resetirajMupomat();

                    }
                    break;
                case 2:
                    if (cmbObavijesti.getSelectedIndex() == 1 && bK == 4) {
                        posaljiSMS();
                        JOptionPane.showMessageDialog(rootPane, txtMupomat.getText() + ":" + " " + "5. ste u redu za dokument " + listaDokumenata.getSelectedValue().toString().substring(3)+".", "Obavijest", JOptionPane.INFORMATION_MESSAGE);

                    }
                    break;
                case 3:
                    if (cmbObavijesti.getSelectedIndex() == 2 && bK == 6) {
                        posaljiSMS();
                        JOptionPane.showMessageDialog(rootPane, txtMupomat.getText() + ":" + " " + "7. ste u redu za dokument " + listaDokumenata.getSelectedValue().toString().substring(3)+".", "Obavijest", JOptionPane.INFORMATION_MESSAGE);

                    }
                    break;
                case 4:
                    if (cmbObavijesti.getSelectedIndex() == 3 && bK == 9) {
                        posaljiSMS();
                        JOptionPane.showMessageDialog(rootPane, txtMupomat.getText() + ":" + " " + "10. ste u redu za dokument " + listaDokumenata.getSelectedValue().toString().substring(3)+".", "Obavijest", JOptionPane.INFORMATION_MESSAGE);

                    }
                    break;
            }

        }
    }

    private void posaljiSMS() {

        if (txtBrojMobitela.getText().length() == 0) {
            return;
        }

        this.link = this; // Keeps this object alive.
        this.transceiver = SmsTransceiver.getInstance(); // Get the transceiver object.

        // Initialize transceiver.
        String smsHost = "cpa.vianett.no";
        String smsPort = "31337";
        String smsUsername = "mupomat@gmail.com";
        String smsPassword = "pjmlw";
        this.transceiver.initialize(smsHost, Integer.parseInt(smsPort), smsUsername, smsPassword, new SmsScreenLogger());

        this.transceiver.addSmsEventListener(this); // Registrer this class as listener for SMS events.

        // Send message
        Sms sms = new Sms();
        sms.setId(++this.counter);
        sms.setReplyPath(100);
        sms.setSender("38598323185"); // Set the sender number.

        if (cmbObavijesti.getSelectedIndex() == 0 && bK == 2) {
            sms.setMessage(txtMupomat.getText() + ":" + " " + "3. ste u redu za dokument " + listaDokumenata.getSelectedValue().toString().substring(3)+".");
        }

        if (cmbObavijesti.getSelectedIndex() == 1 && bK == 4) {
            sms.setMessage(txtMupomat.getText() + ":" + " " + "5. ste u redu za dokument " + listaDokumenata.getSelectedValue().toString().substring(3)+".");
        }

        if (cmbObavijesti.getSelectedIndex() == 2 && bK == 6) {
            sms.setMessage(txtMupomat.getText() + ":" + " " + "7. ste u redu za dokument " + listaDokumenata.getSelectedValue().toString().substring(3)+".");
        }

        if (cmbObavijesti.getSelectedIndex() == 3 && bK == 9) {
            sms.setMessage(txtMupomat.getText() + ":" + " " + "10. ste u redu za dokument " + listaDokumenata.getSelectedValue().toString().substring(3)+".");
        }

        sms.setRecipient("385" + txtBrojMobitela.getText().trim().substring(1)); // The recipients phone number.

        this.transceiver.send(sms);

    }

    @Override
    public void eventHappened(SmsEvent event) {
        if (event instanceof SmsDeliveredEvent) {
            System.out.println("Sms delivered.");
            System.out.println("Refno : " + event.getReferenceId());
            System.out.println("Sms generated by : " + event.getSource().getClass());
        } else if (event instanceof SmsSendingFailedEvent) {
            System.out.println("Sms sending failed.");
            System.out.println("Refno : " + event.getReferenceId());
            System.out.println("Return code : " + ((SmsSendingFailedEvent) event).getReturnCode());
            System.out.println("Sms generated by : " + event.getSource().getClass());
        } else if (event instanceof SmsDeliveryFailedEvent) {
            System.out.println("Sms delivery failed.");
            System.out.println("Refno : " + event.getReferenceId());
            System.out.println("Error code : " + ((SmsDeliveryFailedEvent) event).getErrorCode());
            System.out.println("Sms generated by : " + event.getSource().getClass());
        }
    }

    private void ucitajVrijemeIDatum() {
        URL url;
        HttpURLConnection huc;

        try {
            url = new URL("http://json-time.appspot.com/time.json?tz=Europe/Zagreb");
            huc = (HttpURLConnection) url.openConnection();

            if (huc.getResponseCode() == 503) {
                start();
                System.out.println("Error: 503 Over Quota");
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(Mupomat.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Mupomat.class.getName()).log(Level.SEVERE, null, ex);
        }

        Gson gson = new GsonBuilder()
                .setDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz").create();

        try {

            //convert the json string back to object  
            final Sat sat = gson.fromJson(readUrl("http://json-time.appspot.com/time.json?tz=Europe/Zagreb"), Sat.class);
            final Calendar cal = new GregorianCalendar();
            final String[] daniUTjednu = new String[]{"Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "ÄŒetvrtak",
                "Petak", "Subota"};
            new Thread() {
                public void run() {
                    SimpleDateFormat df = new SimpleDateFormat(Kontrola.FORMAT_DATUMA_VRIJEME);
                    while (true) {
                        lblVrijemeIDatum.setText("  " + daniUTjednu[cal.get(Calendar.DAY_OF_WEEK) - 1] + ", " + df.format(sat.getDatetime()));
                        sat.setDatetime(new Date(sat.getDatetime().getTime() + 1000));

                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Izbornik.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }
            }.start();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static String readUrl(String urlString) throws IOException {
        BufferedReader reader = null;

        try {
            URL url = new URL(urlString);
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buffer = new StringBuffer();
            int read;
            char[] chars = new char[1024];
            while ((read = reader.read(chars)) != -1) {
                buffer.append(chars, 0, read);
            }

            return buffer.toString();
        } catch (IOException ex) {

        } finally {
            if (reader != null) {
                reader.close();

            }

        }
        return null;

    }

    private void vrijemePrijave() {
        lblVrijemePrijave.setText(lblVrijemeIDatum.getText().replace(" ", "").substring(18, 26));

    }

    private void otvaranjeProgramaPromjeniSkin() {
        new Skinovi(this).setVisible(true);
    }

    private void otvaranjeProgramaMape() {
        new Mape(this, tDirectionService.getStrLongtitude().replace(",", "."), tDirectionService.getStrLatitude().replace(",", ".")).setVisible(true);
    }

    public void pronadiLatLng() {
        tDirectionService = new LongLatService();
        Grad g = (Grad) cmbGradovi.getSelectedItem();
        adresa = (lblAdresa.getText() + "+" + g.getNaziv()).replace(" ", "+");
        tDirectionService.getLongitudeLatitude(adresa);

    }

    private void dodajIkonu() {
        this.setIconImage(new ImageIcon(getClass()
                .getResource("/mupomat" + "/pictures" + "/m.png")).getImage());
    }

    private void resetirajMupomat() {
        lblAdresa.setVisible(false);
        lblTelefon.setVisible(false);
        lblMapa.setText("");
        cmbPolicijskeUprave.setSelectedIndex(0);
        cmbGradovi.setSelectedIndex(0);
        cmbPolicijskePostaje.setSelectedIndex(0);
        txtMupomat.setText("");

        DefaultListModel<Dokument> m = (DefaultListModel<Dokument>) listaDokumenata.getModel();
        m.removeAllElements();

        txtBrojMobitela.setText("");
        txtBroj.setText("");
        lblBrojKlijenata.setVisible(false);
        lblVrijemePrijave.setText("");

    }

    private void otvaranjeProgramaPromjenaLozinke() {
        new PromjenaLozinke().setVisible(true);
    }

    private void datum() {

        Calendar cal = new GregorianCalendar();
        int dan = cal.get(Calendar.DAY_OF_MONTH);
        int mjesec = cal.get(Calendar.MONTH) + 1;
        int godina = cal.get(Calendar.YEAR);

        String dan1 = Integer.toString(dan);
        if (dan < 10) {
            dan1 = "0" + dan;
        }

        String mjesec1 = Integer.toString(mjesec);
        if (mjesec < 10) {
            mjesec1 = "0" + mjesec;
        }

        String[] daniutjednu = new String[]{"Nedjelja", "Ponedjeljak", "Utorak", "Srijeda", "ÄŒetvrtak",
            "Petak", "Subota"};

        datum = ("  " + daniutjednu[cal.get(Calendar.DAY_OF_WEEK) - 1] + ", " + dan1 + ". " + mjesec1 + ". " + godina + ". ");

    }

    public String timeNow() {
        Calendar now = Calendar.getInstance();
        int hrs = now.get(Calendar.HOUR_OF_DAY);
        int min = now.get(Calendar.MINUTE);
        int sec = now.get(Calendar.SECOND);

        String time = zero(hrs) + ":" + zero(min) + ":" + zero(sec);

        return time;

    }

    public String zero(int num) {
        String number = (num < 10) ? ("0" + num) : ("" + num);
        return number;                                    //Add leading zero if needed

    }

    public void start() {
        if (runner == null) {
            runner = new Thread(this);
        }
        runner.start();
        //method to start thread
    }

    public void run() {
        while (runner == Thread.currentThread()) {
            lblVrijemeIDatum.setText(datum + timeNow());
            repaint();
            //define thread task
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                System.out.println("Thread failed");
            }

        }
    }

}
