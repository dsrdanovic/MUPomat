/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mupomat.view;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.font.TextAttribute;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import mupomat.controller.ObradaKorisnik;
import mupomat.controller.ObradaOperater;
import mupomat.model.Korisnik;
import mupomat.model.Operater;
import mupomat.utility.PropertiesZapamtiMe;

/**
 *
 * @author SrKy
 */
public class PrijavaKorisnika extends javax.swing.JFrame {

    private ObradaOperater obradaOperater;
    private ObradaKorisnik obradaKorisnik;
    private Korisnik korisnik;

    /**
     * Creates new form PrijavaKorisnika
     */
    public PrijavaKorisnika() {
        initComponents();
        postaviZapamtiMe();
        centrirajZaslon();
        dodajIkonu();
        obradaOperater = new ObradaOperater();
        obradaKorisnik = new ObradaKorisnik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtKorisnik = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnPrijavi = new javax.swing.JButton();
        chbZapamtiMe = new javax.swing.JCheckBox();
        txtLozinka = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        lblKorisnickoIme = new javax.swing.JLabel();
        lblRegistrirajSe = new javax.swing.JLabel();
        lblLozinka = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MUPomat: Prijava");
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Prijavite se"));

        jLabel1.setText("Korisničko ime");

        txtKorisnik.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKorisnikKeyPressed(evt);
            }
        });

        jLabel2.setText("Lozinka");

        btnPrijavi.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPrijavi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mupomat/pictures/prijavaikona.png"))); // NOI18N
        btnPrijavi.setText("PRIJAVITE SE");
        btnPrijavi.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPrijavi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrijaviActionPerformed(evt);
            }
        });

        chbZapamtiMe.setText("Zapamti me");
        chbZapamtiMe.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chbZapamtiMe.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chbZapamtiMeStateChanged(evt);
            }
        });

        txtLozinka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLozinkaActionPerformed(evt);
            }
        });
        txtLozinka.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLozinkaKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chbZapamtiMe)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLozinka, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtKorisnik, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnPrijavi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtKorisnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtLozinka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chbZapamtiMe)
                .addGap(13, 13, 13)
                .addComponent(btnPrijavi)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setBackground(new java.awt.Color(0, 50, 150));
        jLabel4.setFont(new java.awt.Font("Cooper Black", 0, 36)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mupomat/pictures/mup2.png"))); // NOI18N

        lblKorisnickoIme.setText("Zaboravili ste korisničko ime?");
        lblKorisnickoIme.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblKorisnickoIme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblKorisnickoImeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblKorisnickoImeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblKorisnickoImeMouseExited(evt);
            }
        });

        lblRegistrirajSe.setText("Registrirajte se");
        lblRegistrirajSe.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblRegistrirajSe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRegistrirajSeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblRegistrirajSeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblRegistrirajSeMouseExited(evt);
            }
        });

        lblLozinka.setText("Zaboravili ste lozinku?");
        lblLozinka.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblLozinka.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLozinkaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblLozinkaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblLozinkaMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRegistrirajSe, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblKorisnickoIme, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLozinka, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(8, 8, 8))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblRegistrirajSe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblKorisnickoIme)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLozinka)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrijaviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrijaviActionPerformed
        prijavi();

    }//GEN-LAST:event_btnPrijaviActionPerformed

    private void txtLozinkaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLozinkaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            prijavi();
        }
    }//GEN-LAST:event_txtLozinkaKeyPressed

    private void txtLozinkaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLozinkaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLozinkaActionPerformed

    private void txtKorisnikKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKorisnikKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (txtLozinka.getPassword().length > 0) {
                prijavi();
            } else if (kontrolaKorisnik()) {
                txtLozinka.requestFocus();
            }
        }
    }//GEN-LAST:event_txtKorisnikKeyPressed

    private void chbZapamtiMeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chbZapamtiMeStateChanged

        if (chbZapamtiMe.isSelected() == false) {
            backup();
            txtKorisnik.setEditable(true);
            txtLozinka.setEditable(true);
            OutputStream output;

            try {

                String username = "";
                String password = "";
                Properties properties = PropertiesZapamtiMe.getProperties();

                properties.setProperty("username", username);
                properties.setProperty("password", password);

                output = new FileOutputStream("zapamtime.properties");
                properties.store(output, username);
                properties.store(output, password);

            } catch (IOException ex) {
                Logger.getLogger(Mupomat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (chbZapamtiMe.isSelected()) {
            txtKorisnik.setEditable(false);
            txtLozinka.setEditable(false);
            if (txtKorisnik.getText().length() == 0 || new String(txtLozinka.getPassword()).length() == 0) {
                JOptionPane.showMessageDialog(rootPane, "Niste unijeli korisničko ime ili lozinku!", "Greška", JOptionPane.ERROR_MESSAGE);
                txtKorisnik.requestFocus();

            }
            OutputStream output;

            try {

                String username = txtKorisnik.getText();
                String password = (new String(txtLozinka.getPassword()));
                Properties properties = PropertiesZapamtiMe.getProperties();

                properties.setProperty("username", username);
                properties.setProperty("password", password);

                output = new FileOutputStream("zapamtime.properties");
                properties.store(output, username);
                properties.store(output, password);

            } catch (IOException ex) {
                Logger.getLogger(Mupomat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_chbZapamtiMeStateChanged

    private void lblRegistrirajSeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegistrirajSeMouseClicked

        otvaranjeProgramaRegistracija();

    }//GEN-LAST:event_lblRegistrirajSeMouseClicked

    private void lblRegistrirajSeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegistrirajSeMouseEntered
        Font font = lblRegistrirajSe.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblRegistrirajSe.setFont(font.deriveFont(attributes));

    }//GEN-LAST:event_lblRegistrirajSeMouseEntered

    private void lblRegistrirajSeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegistrirajSeMouseExited
        lblRegistrirajSe.setFont(null);
    }//GEN-LAST:event_lblRegistrirajSeMouseExited

    private void lblKorisnickoImeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblKorisnickoImeMouseClicked
        otvaranjeProgramaEmail();
    }//GEN-LAST:event_lblKorisnickoImeMouseClicked

    private void lblKorisnickoImeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblKorisnickoImeMouseEntered
        Font font = lblKorisnickoIme.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblKorisnickoIme.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblKorisnickoImeMouseEntered

    private void lblKorisnickoImeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblKorisnickoImeMouseExited
        lblKorisnickoIme.setFont(null);
    }//GEN-LAST:event_lblKorisnickoImeMouseExited

    private void lblLozinkaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLozinkaMouseEntered
        Font font = lblLozinka.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblLozinka.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblLozinkaMouseEntered

    private void lblLozinkaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLozinkaMouseExited
        lblLozinka.setFont(null);
    }//GEN-LAST:event_lblLozinkaMouseExited

    private void lblLozinkaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLozinkaMouseClicked
        otvaranjeProgramaPodrskaLozinka();
    }//GEN-LAST:event_lblLozinkaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPrijavi;
    private javax.swing.JCheckBox chbZapamtiMe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblKorisnickoIme;
    private javax.swing.JLabel lblLozinka;
    private javax.swing.JLabel lblRegistrirajSe;
    private javax.swing.JTextField txtKorisnik;
    private javax.swing.JPasswordField txtLozinka;
    // End of variables declaration//GEN-END:variables

    private void centrirajZaslon() {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
        this.setResizable(false);
    }

    private void dodajIkonu() {
        this.setIconImage(new ImageIcon(getClass()
                .getResource("/mupomat" + "/pictures" + "/m.png")).getImage());
    }

    private void prijavi() {

        korisnik = prijaviKorisnika();

        if (korisnik != null) {

            new Mupomat(korisnik).setVisible(true);

            this.dispose();
            return;
        }

        prijaviOperatera();

    }

    private boolean kontrola() {
        return kontrolaKorisnik() && kontrolaLozinka();
    }

    private boolean kontrolaKorisnik() {
        if (txtKorisnik.getText().trim().length() == 0) {
            txtKorisnik.requestFocus();
            return false;
        }
        return true;

    }

    private boolean kontrolaLozinka() {
        if (txtLozinka.getPassword().length == 0) {
            txtLozinka.requestFocus();
            return false;
        }
        return true;
    }

    private void otvaranjeProgramaRegistracija() {
        new Registracija().setVisible(true);
    }

    private Korisnik prijaviKorisnika() {

        if (!kontrola()) {
            JOptionPane.showMessageDialog(rootPane, "Obavezan unos podataka", "Greška", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        //kada dođem ovdje korisnik i lozinka su uneseni
        Korisnik korisnik = null;

        try {

            korisnik = obradaKorisnik.prijaviKorisnika(txtKorisnik.getText(), new String(txtLozinka.getPassword()));

            //hvatati ćemo sve greške koje se mogu 
            //dogoditi prilikom spajanja na bazu
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, "Nema konfiguracijske datoteke", "Greška", JOptionPane.ERROR_MESSAGE);
            return null;
        } catch (ClassNotFoundException | IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Driver za bazu nije u classpath", "Greška", JOptionPane.ERROR_MESSAGE);
            return null;

        } catch (SQLException ex) {
            switch (ex.getErrorCode()) {
                case 0:
                    JOptionPane.showMessageDialog(rootPane, "Server nedostupan", "Greška", JOptionPane.ERROR_MESSAGE);
                    break;
                case 1049:
                    JOptionPane.showMessageDialog(rootPane, "Baza ne postoji na serveru", "Greška", JOptionPane.ERROR_MESSAGE);
                    break;

                default:
                    JOptionPane.showMessageDialog(rootPane, ex.getMessage() + ".\nMolimo kontaktirajte proizvođača", "Greška", JOptionPane.ERROR_MESSAGE);
                    break;

            }

        }

        return korisnik;

    }

    private void prijaviOperatera() {
        if (!kontrola()) {
            //JOptionPane.showMessageDialog(rootPane, "Obavezan unos podataka", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //kada dođem ovdje korisnik i lozinka su uneseni
        Operater operater = null;

        try {

            operater = obradaOperater.prijaviOperatera(txtKorisnik.getText(), new String(txtLozinka.getPassword()));

            //hvatati ćemo sve greške koje se mogu 
            //dogoditi prilikom spajanja na bazu
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, "Nema konfiguracijske datoteke", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        } catch (ClassNotFoundException | IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Driver za bazu nije u classpath", "Greška", JOptionPane.ERROR_MESSAGE);
            return;

        } catch (SQLException ex) {
            switch (ex.getErrorCode()) {
                case 0:
                    JOptionPane.showMessageDialog(rootPane, "Server nedostupan", "Greška", JOptionPane.ERROR_MESSAGE);
                    break;
                case 1049:
                    JOptionPane.showMessageDialog(rootPane, "Baza ne postoji na serveru", "Greška", JOptionPane.ERROR_MESSAGE);
                    break;
                default:
                    JOptionPane.showMessageDialog(rootPane, ex.getMessage() + ".\nMolimo kontaktirajte proizvođača", "Greška", JOptionPane.ERROR_MESSAGE);
                    break;

            }

        }

        if (operater == null) {
            JOptionPane.showMessageDialog(rootPane, "Neispravno korisničko ime ili lozinka", "Greška", JOptionPane.ERROR_MESSAGE);
            return;
        }
        new Izbornik(operater).setVisible(true);
        this.dispose();

    }

//    private boolean kontrolaNeaktivniKorisnik() {
//        List<Korisnik> k = obradaKorisnik.dohvatiNeaktivnogKorisnika(txtKorisnik.getText().trim());
//        if (k != null) {
//            JOptionPane.showMessageDialog(rootPane, "Račun s ovim korisničkim imenom je neaktivan!", "Pogreška kod unosa", JOptionPane.ERROR_MESSAGE);
//            txtKorisnik.requestFocus();
//            return false;
//
//        }
//
//        return true;
//    }
    private void postaviZapamtiMe() {

        try {
            Properties properties = PropertiesZapamtiMe.getProperties();

            if (properties.getProperty("username", "").length() == 0 && properties.getProperty("password", "").length() == 0) {
                txtKorisnik.setText("");
                txtLozinka.setText("");
                chbZapamtiMe.setSelected(false);

            } else {
                txtKorisnik.setText(properties.getProperty("username", ""));
                txtLozinka.setText(properties.getProperty("password", ""));
                chbZapamtiMe.setSelected(true);

            }

        } catch (IOException ex) {
            Logger.getLogger(PrijavaKorisnika.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void otvaranjeProgramaEmail() {
        new PodrskaKorisnickoIme().setVisible(true);
    }

    private boolean kontrolaNeaktivniKorisnik() {
        List<Korisnik> k = obradaKorisnik.dohvatiNeaktivnogKorisnika(txtKorisnik.getText().trim());
        if (k != null) {
            JOptionPane.showMessageDialog(rootPane, "Račun s ovim korisničkim imenom je neaktivan!", "Pogreška kod unosa", JOptionPane.ERROR_MESSAGE);
            txtKorisnik.requestFocus();
            return false;

        }
        return true;
    }

    private void otvaranjeProgramaPodrskaLozinka() {
        new PodrskaLozinka().setVisible(true);
    }

    private void backup() {
        OutputStream output;  
        try {

                String korisnickoime = txtKorisnik.getText();
                String lozinka = (new String(txtLozinka.getPassword()));
                Properties properties = PropertiesZapamtiMe.getProperties();

                properties.setProperty("korisnickoime", korisnickoime);
                properties.setProperty("lozinka", lozinka);

                output = new FileOutputStream("zapamtime.properties");
                properties.store(output, korisnickoime);
                properties.store(output, lozinka);

            } catch (IOException ex) {
                Logger.getLogger(Mupomat.class.getName()).log(Level.SEVERE, null, ex);
            }

}
}